ea.experiment(
  runs = (randomGenerator = (seed = [1:1:1]) * [ea.rg.defaultRG()]) * [
    ea.run(
      solver = er.s.listGP(
        mapper = er.m.treeBasedHomoBrains(target = s.a.distributedNumGridVSR(
          body = s.a.vsr.gridBody(
            sensorizingFunction = s.a.vsr.sf.uniform(
              sensors = [s.s.ar(); s.s.rv(a = 0); s.s.rv(a = 90)]
            );
            shape = s.a.vsr.s.biped(w = 4; h = 3)
          );
          function = ds.num.outStepped(stepT = 0.2; inner=er.ds.num.tbf());
          signals = 1
        ));
        nEval = 50;
        nPop = 10
      );
      problem = ea.p.totalOrder(
        qFunction = s.taskRunner(task = s.task.locomotion());
        cFunction = s.task.locomotion.xVelocity();
        type = maximize
      )
    )
  ];
  listeners = [
    ea.l.tui(
      functions = [
        ea.nf.size(f = ea.nf.genotype(individual = ea.nf.best()); s = "%5d");
        ea.nf.bestFitness(f = ea.nf.f(outerF = s.task.l.xVelocity(); s = "%5.2f"));
        ea.nf.fitnessHist(f = ea.nf.f(outerF = s.task.l.xVelocity()))
      ];
      plots = [
        ea.plot.fitness(x = ea.nf.progress(); f = ea.nf.f(outerF = s.task.l.xVelocity()); sort = max; minY = 0; maxX = 1)
      ]
    );
    ea.l.telegram(
        chatId = "289266252";
        botIdFilePath = "bot.txt";
        plots = [
          ea.plot.fitness(f = ea.nf.f(outerF = s.task.l.xVelocity()); sort = max; minY = 0)
        ];
        accumulators = [
          er.video(task = s.task.locomotion(terrain = sim.terrain.flat(); duration = 15; initialYGap = 0.1))
        ]
    );
    ea.l.bestCsv(
          filePath = "best.csv";
          functions = [
            ea.nf.bestFitness(f = ea.nf.f(outerF = s.task.l.xVelocity(); s = "%5.2f"));
            er.nf.stringBase64(f = ea.nf.genotype(individual = ea.nf.best()))
          ];
          runKeys = ["solver.mapper.target"]
    )
  ]
)