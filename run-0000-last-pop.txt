ea.runOutcome(
  index = 0;
  run = ea.run(
    problem = ea.p.simTo(
      f = s.f.outcome.scoreSumoAgentvsBox(
        of = f.identity();
        format = "%.1f";
        transientTime = 5
      );
      simulation = s.task.trainingSumo(
        duration = 30;
        terrain = s.t.sumoArena(
          flatH = 5;
          flatW = 5;
          h = 20;
          borderW = 10;
          borderH = 20
        )
      );
      name = null;
      type = maximize
    );
    name = "";
    randomGenerator = m.defaultRG(seed = 1);
    solver = ea.s.ga(
      nPop = 1;
      minNTournament = 3;
      crossoverP = 0.8;
      nEval = 5;
      name = ga;
      mapper = er.m.bodyBrainHomoDistributedVSR(
        nOfSignals = 1;
        sensors = [s.s.a(); s.s.ar(); s.s.rv(a = 0); s.s.rv(a = 90)];
        directional = true;
        of = ea.m.pair(
          of = ea.m.dsSplit(of = ea.m.identity());
          first = ea.m.dsToFixedGrid(
            rate = 0.25;
            negItem = s.a.vsr.voxel(type = none);
            of = ea.m.identity();
            posItem = s.a.vsr.voxel(type = soft)
          );
          second = ea.m.steppedNds(
            stepT = 0.2;
            of = ea.m.dsToNpnds(
              of = ea.m.identity();
              npnds = ds.num.mlp(
                activationFunction = tanh;
                innerLayerRatio = 0.65;
                nOfInnerLayers = 1
              )
            )
          )
        );
        w = 8;
        h = 8
      );
      maxUniquenessAttempts = 100;
      representation = ea.r.doubleString(
        sigmaMut = 0.35;
        initialMaxV = 1;
        initialMinV = -1
      );
      tournamentRate = 0.05;
      remap = false
    )
  );
  serializedGenotypes = [
    "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"
  ]
)